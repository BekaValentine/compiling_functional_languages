data Nat;
con Zero : () ~> Nat;
con Suc : (Nat) ~> Nat;

term $plus : Nat -> (Nat -> Nat);
term $plus = \x -> \y ->
  case x of
    | Zero() -> y
    | Suc(x1) -> Suc($plus x1 y)
    ;

data NatList;
con Nil : () ~> NatList;
con Cons : (Nat, NatList) ~> NatList;

term $lengthNatList : NatList -> Nat;
term $mapNatList : (Nat -> Nat) -> (NatList -> NatList);

term $lengthNatList = \xs ->
  case xs of
    | Nil() -> Zero()
    | Cons(x,xs1) -> Suc($lengthNatList(xs1))
    ;

term $mapNatList = \f -> \xs ->
  case xs of
    | Nil() -> Nil()
    | Cons(x,xs1) -> Cons(f x, $mapNatList f xs1)
    ;

term $foo : Nat;
term $foo = $plus Suc(Zero()) Suc(Zero());